// src/index.tsx
import { createContext, useContext, useEffect } from "react";

// src/useLocalStorage.ts
import { useState } from "react";
function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    if (typeof window === "undefined") {
      return initialValue;
    }
    try {
      const item = window.localStorage.getItem(key);
      if (!item) window.localStorage.setItem(key, JSON.stringify(initialValue));
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.log(error);
      return initialValue;
    }
  });
  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      if (typeof window !== "undefined") {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.log(error);
    }
  };
  return [storedValue, setValue];
}

// src/index.tsx
import { jsx } from "react/jsx-runtime";
var DarkModeContext = createContext({
  mode: "system",
  setMode: () => {
  }
});
var preferDarkQuery = "(prefers-color-scheme: dark)";
var mediaQueryEventTarget = typeof window !== "undefined" ? window.matchMedia(preferDarkQuery) : null;
var DarkModeProvider = ({ children }) => {
  const [mode, setMode] = useLocalStorage("scheme-mode", "system");
  useEffect(() => {
    const listener = (e) => {
      if (mode === "system") setClassOnDocument(e.matches);
    };
    mediaQueryEventTarget == null ? void 0 : mediaQueryEventTarget.addEventListener("change", listener);
    return () => mediaQueryEventTarget == null ? void 0 : mediaQueryEventTarget.removeEventListener("change", listener);
  }, [mode]);
  useEffect(() => {
    if (mode === "dark") return setClassOnDocument(true);
    if (mode === "light") return setClassOnDocument(false);
    setClassOnDocument(window.matchMedia(preferDarkQuery).matches);
  }, [mode]);
  return /* @__PURE__ */ jsx(DarkModeContext.Provider, { value: { mode, setMode }, children });
};
var setClassOnDocument = (darkTheme) => {
  const classNameDark = "dark-mode";
  const classNameLight = "light-mode";
  const element = typeof window !== "undefined" ? document.querySelector("html") : null;
  if (!element) return;
  element.classList.add(darkTheme ? classNameDark : classNameLight);
  element.classList.remove(darkTheme ? classNameLight : classNameDark);
};
var useDarkMode = () => useContext(DarkModeContext);
export {
  DarkModeProvider,
  useDarkMode
};
